<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io</link></image><lastBuildDate>Sat, 06 Sep 2025 09:02:16 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>Java并发基础总结</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-bing-fa-ji-chu-zong-jie.html</link><description>&lt;!-- TOC --&gt;

- [Java 并发基础常见面试题总结](#Java-并发基础常见面试题总结)
  - [1. 什么是线程和进程?](#1-什么是线程和进程)
    - [1.1. 何为进程?](#11-何为进程)
    - [1.2. 何为线程?](#12-何为线程)
  - [2. 请简要描述线程与进程的关系,区别及优缺点？](#2-请简要描述线程与进程的关系区别及优缺点)
    - [2.1. 图解进程和线程的关系](#21-图解进程和线程的关系)
    - [2.2. 程序计数器为什么是私有的?](#22-程序计数器为什么是私有的)
    - [2.3. 虚拟机栈和本地方法栈为什么是私有的?](#23-虚拟机栈和本地方法栈为什么是私有的)
    - [2.4. 一句话简单了解堆和方法区](#24-一句话简单了解堆和方法区)
  - [3. 说说并发与并行的区别?](#3-说说并发与并行的区别)
  - [4. 为什么要使用多线程呢?](#4-为什么要使用多线程呢)
  - [5. 使用多线程可能带来什么问题?](#5-使用多线程可能带来什么问题)
  - [6. 说说线程的生命周期和状态?](#6-说说线程的生命周期和状态)
  - [7. 什么是上下文切换?](#7-什么是上下文切换)
  - [8. 什么是线程死锁?如何避免死锁?](#8-什么是线程死锁如何避免死锁)
    - [8.1. 认识线程死锁](#81-认识线程死锁)
    - [8.2. 如何避免线程死锁?](#82-如何避免线程死锁)
  - [9. 说说 sleep() 方法和 wait() 方法区别和共同点?](#9-说说-sleep-方法和-wait-方法区别和共同点)
  - [10. 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？](#10-为什么我们调用-start-方法时会执行-run-方法为什么我们不能直接调用-run-方法)
  - [公众号](#公众号)

&lt;!-- /TOC --&gt;

# Java 并发基础常见面试题总结

### 参考文献：[Java 并发](https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md)

## 1. 什么是线程和进程?

### 1.1. 何为进程?

进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-bing-fa-ji-chu-zong-jie.html</guid><pubDate>Sat, 06 Sep 2025 09:01:45 +0000</pubDate></item><item><title>MyBatis基础</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/MyBatis-ji-chu.html</link><description>## **基本使用**
#### **1.企业的流行框架**
SSM：Spring、SpringMVC、MyBatis
Apache Shiro
SpingBoot

#### **2.客户端请求流程**
- 客户端请求会先来到 `控制层Servlet/Controller`，再到 `业务层Service`，最后为 `数据持久层Dao`。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/MyBatis-ji-chu.html</guid><pubDate>Sat, 06 Sep 2025 09:01:05 +0000</pubDate></item><item><title>MySQL的三大日志</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-de-san-da-ri-zhi.html</link><description>## **前言**

### 参考文档：[原来MySQL面试还会问这些...](https://mp.weixin.qq.com/s/Lx4TNPLQzYaknR7D3gmOmQ)

`MySQL日志` 主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-de-san-da-ri-zhi.html</guid><pubDate>Sat, 06 Sep 2025 08:59:48 +0000</pubDate></item><item><title>MySQL优化规范</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-you-hua-gui-fan.html</link><description>&lt;!-- TOC --&gt;

- [数据库命令规范](#数据库命令规范)
- [数据库基本设计规范](#数据库基本设计规范)
    - [1. 所有表必须使用 Innodb 存储引擎](#1-所有表必须使用-innodb-存储引擎)
    - [2. 数据库和表的字符集统一使用 UTF8](#2-数据库和表的字符集统一使用-utf8)
    - [3. 所有表和字段都需要添加注释](#3-所有表和字段都需要添加注释)
    - [4. 尽量控制单表数据量的大小,建议控制在 500 万以内。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-you-hua-gui-fan.html</guid><pubDate>Sat, 06 Sep 2025 08:58:57 +0000</pubDate></item><item><title>数据库知识概述</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/shu-ju-ku-zhi-shi-gai-shu.html</link><description>### 参考文献：[MySQL](https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md)、[SQL 练习](https://github.com/CyC2018/CS-Notes/blob/master/notes/SQL%20%E7%BB%83%E4%B9%A0.md)、[SQL 语法](https://github.com/CyC2018/CS-Notes/blob/master/notes/SQL%20%E8%AF%AD%E6%B3%95.md)

### **一、什么是数据库,数据库管理系统,数据库系统,数据库管理员?**

- **数据库** :数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/shu-ju-ku-zhi-shi-gai-shu.html</guid><pubDate>Sat, 06 Sep 2025 08:58:05 +0000</pubDate></item><item><title>计算机网络基础</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/ji-suan-ji-wang-luo-ji-chu.html</link><description>### 参考文献：[HTTP](https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md) ------ http方法、状态码、首部、https、http1.0/2.0；  

## 一 OSI 与 TCP/IP 各层的结构与功能,都有哪些协议?

学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/ji-suan-ji-wang-luo-ji-chu.html</guid><pubDate>Sat, 06 Sep 2025 08:56:37 +0000</pubDate></item><item><title>Liunx基础操作</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Liunx-ji-chu-cao-zuo.html</link><description>### 参考文献：[Linux](https://github.com/CyC2018/CS-Notes/blob/master/notes/Linux.md)

今天这篇文章中简单介绍一下一个 Java 程序员必知的 Linux 的一些概念以及常见命令。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Liunx-ji-chu-cao-zuo.html</guid><pubDate>Sat, 06 Sep 2025 08:55:57 +0000</pubDate></item><item><title>操作系统基础</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/cao-zuo-xi-tong-ji-chu.html</link><description>### 参考文献：[计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E7%9B%AE%E5%BD%95.md)

大家好，我是帅哥！

这篇文章只是对一些操作系统比较重要概念的一个概览，深入学习的话，建议大家还是老老实实地去看书。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/cao-zuo-xi-tong-ji-chu.html</guid><pubDate>Sat, 06 Sep 2025 08:54:40 +0000</pubDate></item><item><title>垃圾回收机制</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/la-ji-hui-shou-ji-zhi.html</link><description>## 前言
Java 相比 C/C++ 最显著的特点便是**引入了自动垃圾回收** (下文统一用 GC 指代自动垃圾回收)，它解决了 C/C++ 最令人头疼的内存管理问题，让程序员专注于程序本身，不用关心内存回收这些恼人的问题，这也是 Java 能大行其道的重要原因之一，GC 真正让程序员的生产力得到了释放，但是程序员很难感知到它的存在，这就好比，我们吃完饭后在桌上放下餐盘即走，服务员会替你收拾好这些餐盘，你不会关心服务员什么时候来收，怎么收。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/la-ji-hui-shou-ji-zhi.html</guid><pubDate>Sat, 06 Sep 2025 08:53:10 +0000</pubDate></item><item><title>Java中那18 把锁</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-zhong-na-18%20-ba-suo.html</link><description>### [互斥锁、自旋锁、读写锁、悲观锁、乐观锁的应用场景](https://mp.weixin.qq.com/s/6QrQ0TZVqSQq26Rms0_mvA)

## 一、乐观锁和悲观锁

### 1. 悲观锁

悲观锁对应于生活中悲观的人，悲观的人总是想着事情往坏的方向发展。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-zhong-na-18%20-ba-suo.html</guid><pubDate>Sat, 06 Sep 2025 08:49:24 +0000</pubDate></item><item><title>RAG</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/RAG.html</link><description># 大模型知识问答RAG

## 一、RAG

&gt; **RAG主要涉及企业内部的文档数据，如果需要一些插件功能，只能需要外部Function calling调用等操作；**

大模型缺点：知识不是实时的、不知道私有领域的业务知识。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/RAG.html</guid><pubDate>Wed, 18 Jun 2025 10:57:45 +0000</pubDate></item><item><title>第一篇博客</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/di-yi-pian-bo-ke.html</link><description>## 第一

### 第二

- ![Image](https://github.com/user-attachments/assets/49178100-4fd3-41c1-8f76-15531692576e)

Retrieval-Augmented Generation（RAG） 将“检索”与“生成”结合，保障回答的 **事实准确性** 与 **自然表达**。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/di-yi-pian-bo-ke.html</guid><pubDate>Wed, 18 Jun 2025 10:54:31 +0000</pubDate></item></channel></rss>