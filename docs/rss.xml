<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io</link></image><lastBuildDate>Sat, 06 Sep 2025 09:05:06 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>Spring 框架设计模式</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Spring%20-kuang-jia-she-ji-mo-shi.html</link><description>&lt;!-- TOC --&gt;

- [控制反转(IoC)和依赖注入(DI)](#控制反转ioc和依赖注入di)
- [工厂设计模式](#工厂设计模式)
- [单例设计模式](#单例设计模式)
- [代理设计模式](#代理设计模式)
    - [代理模式在 AOP 中的应用](#代理模式在-aop-中的应用)
    - [Spring AOP 和 AspectJ AOP 有什么区别?](#spring-aop-和-aspectj-aop-有什么区别)
- [模板方法](#模板方法)
- [观察者模式](#观察者模式)
    - [Spring 事件驱动模型中的三种角色](#spring-事件驱动模型中的三种角色)
        - [事件角色](#事件角色)
        - [事件监听者角色](#事件监听者角色)
        - [事件发布者角色](#事件发布者角色)
    - [Spring 的事件流程总结](#spring-的事件流程总结)
- [适配器模式](#适配器模式)
    - [spring AOP中的适配器模式](#spring-aop中的适配器模式)
    - [spring MVC中的适配器模式](#spring-mvc中的适配器模式)
- [装饰者模式](#装饰者模式)
- [总结](#总结)
- [参考](#参考)

&lt;!-- /TOC --&gt;

### 参考文献：[设计模式目录](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md)

## **Spring 框架中用到了哪些设计模式？**

关于下面一些设计模式的详细介绍，可以看笔主前段时间的原创文章[《面试官:“谈谈 Spring 中都用到了那些设计模式?”。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Spring%20-kuang-jia-she-ji-mo-shi.html</guid><pubDate>Sat, 06 Sep 2025 09:04:36 +0000</pubDate></item><item><title>Spring</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Spring.html</link><description>这篇文章主要是想通过一些问题，加深大家对于 Spring 的理解，所以不会涉及太多的代码！

下面的很多问题我自己在使用 Spring 的过程中也并没有注意，自己也是临时查阅了很多资料和书籍补上的。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Spring.html</guid><pubDate>Sat, 06 Sep 2025 09:03:49 +0000</pubDate></item><item><title>MySQL数据库索引</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-shu-ju-ku-suo-yin.html</link><description>## 一、何为索引？有什么作用？**

**索引是一种用于快速查询和检索数据的数据结构。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-shu-ju-ku-suo-yin.html</guid><pubDate>Sat, 06 Sep 2025 09:02:56 +0000</pubDate></item><item><title>并发进阶总结</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/bing-fa-jin-jie-zong-jie.html</link><description>&lt;!-- @import '[TOC]' {cmd='toc' depthFrom=1 depthTo=6 orderedList=false} --&gt;

&lt;!-- code_chunk_output --&gt;

- [Java 并发进阶常见面试题总结](#java-并发进阶常见面试题总结)
  - [1.synchronized 关键字](#1synchronized-关键字)
    - [1.1.说一说自己对于 synchronized 关键字的了解](#11说一说自己对于-synchronized-关键字的了解)
    - [1.2. 说说自己是怎么使用 synchronized 关键字](#12-说说自己是怎么使用-synchronized-关键字)
    - [1.3. 构造方法可以使用 synchronized 关键字修饰么？](#13-构造方法可以使用-synchronized-关键字修饰么)
    - [1.3. 讲一下 synchronized 关键字的底层原理](#13-讲一下-synchronized-关键字的底层原理)
      - [1.3.1. synchronized 同步语句块的情况](#131-synchronized-同步语句块的情况)
      - [1.3.2. synchronized 修饰方法的的情况](#132-synchronized-修饰方法的的情况)
      - [1.3.3.总结](#133总结)
    - [1.4. 说说 JDK1.6 之后的 synchronized 关键字底层做了哪些优化，可以详细介绍一下这些优化吗](#14-说说-jdk16-之后的-synchronized-关键字底层做了哪些优化可以详细介绍一下这些优化吗)
    - [1.5. 谈谈 synchronized 和 ReentrantLock 的区别](#15-谈谈-synchronized-和-reentrantlock-的区别)
      - [1.5.1. 两者都是可重入锁](#151-两者都是可重入锁)
      - [1.5.2.synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API](#152synchronized-依赖于-jvm-而-reentrantlock-依赖于-api)
      - [1.5.3.ReentrantLock 比 synchronized 增加了一些高级功能](#153reentrantlock-比-synchronized-增加了一些高级功能)
  - [2. volatile 关键字](#2-volatile-关键字)
    - [2.1. CPU 缓存模型](#21-cpu-缓存模型)
    - [2.2. 讲一下 JMM(Java 内存模型)](#22-讲一下-jmmjava-内存模型)
    - [2.3. 并发编程的三个重要特性](#23-并发编程的三个重要特性)
    - [2.4. 说说 synchronized 关键字和 volatile 关键字的区别](#24-说说-synchronized-关键字和-volatile-关键字的区别)
  - [3. ThreadLocal](#3-threadlocal)
    - [3.1. ThreadLocal 简介](#31-threadlocal-简介)
    - [3.2. ThreadLocal 示例](#32-threadlocal-示例)
    - [3.3. ThreadLocal 原理](#33-threadlocal-原理)
    - [3.4. ThreadLocal 内存泄露问题](#34-threadlocal-内存泄露问题)
  - [4. 线程池](#4-线程池)
    - [4.1. 为什么要用线程池？](#41-为什么要用线程池)
    - [4.2. 实现 Runnable 接口和 Callable 接口的区别](#42-实现-runnable-接口和-callable-接口的区别)
    - [4.3. 执行 execute()方法和 submit()方法的区别是什么呢？](#43-执行-execute方法和-submit方法的区别是什么呢)
    - [4.4. 如何创建线程池](#44-如何创建线程池)
    - [4.5 ThreadPoolExecutor 类分析](#45-threadpoolexecutor-类分析)
      - [4.5.1 `ThreadPoolExecutor`构造函数重要参数分析](#451-threadpoolexecutor构造函数重要参数分析)
      - [4.5.2 `ThreadPoolExecutor` 饱和策略](#452-threadpoolexecutor-饱和策略)
    - [4.6 一个简单的线程池 Demo](#46-一个简单的线程池-demo)
    - [4.7 线程池原理分析](#47-线程池原理分析)
  - [5. Atomic 原子类](#5-atomic-原子类)
    - [5.1. 介绍一下 Atomic 原子类](#51-介绍一下-atomic-原子类)
    - [5.2. JUC 包中的原子类是哪 4 类?](#52-juc-包中的原子类是哪-4-类)
    - [5.3. 讲讲 AtomicInteger 的使用](#53-讲讲-atomicinteger-的使用)
    - [5.4. 能不能给我简单介绍一下 AtomicInteger 类的原理](#54-能不能给我简单介绍一下-atomicinteger-类的原理)
  - [6. AQS](#6-aqs)
    - [6.1. AQS 介绍](#61-aqs-介绍)
    - [6.2. AQS 原理分析](#62-aqs-原理分析)
      - [6.2.1. AQS 原理概览](#621-aqs-原理概览)
      - [6.2.2. AQS 对资源的共享方式](#622-aqs-对资源的共享方式)
      - [6.2.3. AQS 底层使用了模板方法模式](#623-aqs-底层使用了模板方法模式)
    - [6.3. AQS 组件总结](#63-aqs-组件总结)
    - [6.4. 用过 CountDownLatch 么？什么场景下用的？](#64-用过-countdownlatch-么什么场景下用的)
  - [7 Reference](#7-reference)

&lt;!-- /code_chunk_output --&gt;


# **Java 并发进阶常见面试题总结**

## **1.synchronized 关键字**

![synchronized关键字.png](/upload/2021/10/synchronized%E5%85%B3%E9%94%AE%E5%AD%97-bf5a1263796649aba1b54cc9201a40a6.png)

&gt; ### 问：知道synchronized原理吗？

synchronized是java提供的原子性内置锁，这种内置的并且使用者看不到的锁也被称为**监视器锁**，使用synchronized之后，会在编译之后在同步的代码块前后加上monitorenter和monitorexit字节码指令，他依赖操作系统底层互斥锁实现。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/bing-fa-jin-jie-zong-jie.html</guid><pubDate>Sat, 06 Sep 2025 09:02:26 +0000</pubDate></item><item><title>Java并发基础总结</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-bing-fa-ji-chu-zong-jie.html</link><description>&lt;!-- TOC --&gt;

- [Java 并发基础常见面试题总结](#Java-并发基础常见面试题总结)
  - [1. 什么是线程和进程?](#1-什么是线程和进程)
    - [1.1. 何为进程?](#11-何为进程)
    - [1.2. 何为线程?](#12-何为线程)
  - [2. 请简要描述线程与进程的关系,区别及优缺点？](#2-请简要描述线程与进程的关系区别及优缺点)
    - [2.1. 图解进程和线程的关系](#21-图解进程和线程的关系)
    - [2.2. 程序计数器为什么是私有的?](#22-程序计数器为什么是私有的)
    - [2.3. 虚拟机栈和本地方法栈为什么是私有的?](#23-虚拟机栈和本地方法栈为什么是私有的)
    - [2.4. 一句话简单了解堆和方法区](#24-一句话简单了解堆和方法区)
  - [3. 说说并发与并行的区别?](#3-说说并发与并行的区别)
  - [4. 为什么要使用多线程呢?](#4-为什么要使用多线程呢)
  - [5. 使用多线程可能带来什么问题?](#5-使用多线程可能带来什么问题)
  - [6. 说说线程的生命周期和状态?](#6-说说线程的生命周期和状态)
  - [7. 什么是上下文切换?](#7-什么是上下文切换)
  - [8. 什么是线程死锁?如何避免死锁?](#8-什么是线程死锁如何避免死锁)
    - [8.1. 认识线程死锁](#81-认识线程死锁)
    - [8.2. 如何避免线程死锁?](#82-如何避免线程死锁)
  - [9. 说说 sleep() 方法和 wait() 方法区别和共同点?](#9-说说-sleep-方法和-wait-方法区别和共同点)
  - [10. 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？](#10-为什么我们调用-start-方法时会执行-run-方法为什么我们不能直接调用-run-方法)
  - [公众号](#公众号)

&lt;!-- /TOC --&gt;

# Java 并发基础常见面试题总结

### 参考文献：[Java 并发](https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md)

## 1. 什么是线程和进程?

### 1.1. 何为进程?

进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-bing-fa-ji-chu-zong-jie.html</guid><pubDate>Sat, 06 Sep 2025 09:01:45 +0000</pubDate></item><item><title>MyBatis基础</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/MyBatis-ji-chu.html</link><description>## **基本使用**
#### **1.企业的流行框架**
SSM：Spring、SpringMVC、MyBatis
Apache Shiro
SpingBoot

#### **2.客户端请求流程**
- 客户端请求会先来到 `控制层Servlet/Controller`，再到 `业务层Service`，最后为 `数据持久层Dao`。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/MyBatis-ji-chu.html</guid><pubDate>Sat, 06 Sep 2025 09:01:05 +0000</pubDate></item><item><title>MySQL的三大日志</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-de-san-da-ri-zhi.html</link><description>## **前言**

### 参考文档：[原来MySQL面试还会问这些...](https://mp.weixin.qq.com/s/Lx4TNPLQzYaknR7D3gmOmQ)

`MySQL日志` 主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-de-san-da-ri-zhi.html</guid><pubDate>Sat, 06 Sep 2025 08:59:48 +0000</pubDate></item><item><title>MySQL优化规范</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-you-hua-gui-fan.html</link><description>&lt;!-- TOC --&gt;

- [数据库命令规范](#数据库命令规范)
- [数据库基本设计规范](#数据库基本设计规范)
    - [1. 所有表必须使用 Innodb 存储引擎](#1-所有表必须使用-innodb-存储引擎)
    - [2. 数据库和表的字符集统一使用 UTF8](#2-数据库和表的字符集统一使用-utf8)
    - [3. 所有表和字段都需要添加注释](#3-所有表和字段都需要添加注释)
    - [4. 尽量控制单表数据量的大小,建议控制在 500 万以内。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/MySQL-you-hua-gui-fan.html</guid><pubDate>Sat, 06 Sep 2025 08:58:57 +0000</pubDate></item><item><title>数据库知识概述</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/shu-ju-ku-zhi-shi-gai-shu.html</link><description>### 参考文献：[MySQL](https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md)、[SQL 练习](https://github.com/CyC2018/CS-Notes/blob/master/notes/SQL%20%E7%BB%83%E4%B9%A0.md)、[SQL 语法](https://github.com/CyC2018/CS-Notes/blob/master/notes/SQL%20%E8%AF%AD%E6%B3%95.md)

### **一、什么是数据库,数据库管理系统,数据库系统,数据库管理员?**

- **数据库** :数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/shu-ju-ku-zhi-shi-gai-shu.html</guid><pubDate>Sat, 06 Sep 2025 08:58:05 +0000</pubDate></item><item><title>计算机网络基础</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/ji-suan-ji-wang-luo-ji-chu.html</link><description>### 参考文献：[HTTP](https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md) ------ http方法、状态码、首部、https、http1.0/2.0；  

## 一 OSI 与 TCP/IP 各层的结构与功能,都有哪些协议?

学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/ji-suan-ji-wang-luo-ji-chu.html</guid><pubDate>Sat, 06 Sep 2025 08:56:37 +0000</pubDate></item><item><title>Liunx基础操作</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Liunx-ji-chu-cao-zuo.html</link><description>### 参考文献：[Linux](https://github.com/CyC2018/CS-Notes/blob/master/notes/Linux.md)

今天这篇文章中简单介绍一下一个 Java 程序员必知的 Linux 的一些概念以及常见命令。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Liunx-ji-chu-cao-zuo.html</guid><pubDate>Sat, 06 Sep 2025 08:55:57 +0000</pubDate></item><item><title>操作系统基础</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/cao-zuo-xi-tong-ji-chu.html</link><description>### 参考文献：[计算机操作系统](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E7%9B%AE%E5%BD%95.md)

大家好，我是帅哥！

这篇文章只是对一些操作系统比较重要概念的一个概览，深入学习的话，建议大家还是老老实实地去看书。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/cao-zuo-xi-tong-ji-chu.html</guid><pubDate>Sat, 06 Sep 2025 08:54:40 +0000</pubDate></item><item><title>垃圾回收机制</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/la-ji-hui-shou-ji-zhi.html</link><description>## 前言
Java 相比 C/C++ 最显著的特点便是**引入了自动垃圾回收** (下文统一用 GC 指代自动垃圾回收)，它解决了 C/C++ 最令人头疼的内存管理问题，让程序员专注于程序本身，不用关心内存回收这些恼人的问题，这也是 Java 能大行其道的重要原因之一，GC 真正让程序员的生产力得到了释放，但是程序员很难感知到它的存在，这就好比，我们吃完饭后在桌上放下餐盘即走，服务员会替你收拾好这些餐盘，你不会关心服务员什么时候来收，怎么收。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/la-ji-hui-shou-ji-zhi.html</guid><pubDate>Sat, 06 Sep 2025 08:53:10 +0000</pubDate></item><item><title>Java中那18 把锁</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-zhong-na-18%20-ba-suo.html</link><description>### [互斥锁、自旋锁、读写锁、悲观锁、乐观锁的应用场景](https://mp.weixin.qq.com/s/6QrQ0TZVqSQq26Rms0_mvA)

## 一、乐观锁和悲观锁

### 1. 悲观锁

悲观锁对应于生活中悲观的人，悲观的人总是想着事情往坏的方向发展。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/Java-zhong-na-18%20-ba-suo.html</guid><pubDate>Sat, 06 Sep 2025 08:49:24 +0000</pubDate></item><item><title>RAG</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/RAG.html</link><description># 大模型知识问答RAG

## 一、RAG

&gt; **RAG主要涉及企业内部的文档数据，如果需要一些插件功能，只能需要外部Function calling调用等操作；**

大模型缺点：知识不是实时的、不知道私有领域的业务知识。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/RAG.html</guid><pubDate>Wed, 18 Jun 2025 10:57:45 +0000</pubDate></item><item><title>第一篇博客</title><link>https://shuaiwang888.github.io/appStore-Blog.github.io/post/di-yi-pian-bo-ke.html</link><description>## 第一

### 第二

- ![Image](https://github.com/user-attachments/assets/49178100-4fd3-41c1-8f76-15531692576e)

Retrieval-Augmented Generation（RAG） 将“检索”与“生成”结合，保障回答的 **事实准确性** 与 **自然表达**。</description><guid isPermaLink="true">https://shuaiwang888.github.io/appStore-Blog.github.io/post/di-yi-pian-bo-ke.html</guid><pubDate>Wed, 18 Jun 2025 10:54:31 +0000</pubDate></item></channel></rss>